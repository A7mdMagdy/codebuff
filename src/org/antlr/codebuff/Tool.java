package org.antlr.codebuff;

import org.antlr.codebuff.misc.LangDescriptor;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.misc.Utils;

import java.io.File;
import java.util.List;
import java.util.Map;

import static org.antlr.codebuff.Dbg.getFilenames;
import static org.antlr.codebuff.Trainer.FEATURES_HPOS;
import static org.antlr.codebuff.Trainer.FEATURES_INJECT_WS;
import static org.antlr.codebuff.misc.BuffUtils.filter;

/** The main CodeBuff tool used to format files. Examples:
 *
   $ java -jar target/codebuff-1.4.19.jar  \
        -g org.antlr.codebuff.ANTLRv4 -rule grammarSpec -corpus corpus/antlr4/training \
        -files g4 -indent 4 -comment LINE_COMMENT T.g4

   $ java -jar codebuff-1.4.19 \
        -g org.antlr.codebuff.Java -rule compilationUnit \
        -corpus corpus/java/training/stringtemplate4  -files java \
        -comment LINE_COMMENT T.java
 *
 * You have to have some libs in your CLASSPATH. See pom.xml, but it's
 * ANTLR 4, Apache commons-lang3, Google guava, and StringTemplate 4.
 *
 * The grammar must be run through ANTLR and be compiled (and in the CLASSPATH).
 * For Java8.g4, use "-g Java8", not the filename. For separated
 * grammar files, like ANTLRv4Parser.g4 and ANTLRv4Lexer.g4, use "-g ANTLRv4".
 * If the grammar is in a package, use fully-qualified like
 * "-g org.antlr.codebuff.ANTLRv4"
 *
 * Output goes to stdout if no -o option used.
 */
public class Tool {
	public static void main(String[] args) throws Exception {
		if ( args.length<7 ) {
			System.err.println("org.antlr.codebuff.Tool -g grammar-name -rule start-rule -corpus root-dir-of-samples \\\n" +
			                   "   [-files file-extension] [-indent num-spaces] \\" +
			                   "   [-comment line-comment-name] [-o output-file] file-to-format");
			return;
		}

		String grammarName = null;
		String startRule = null;
		String corpusDir = null;
		String indentS = "4";
		String commentS = null;
		String testFileName = null;
		String outputFileName = null;
		String fileExtension = null;
		int i = 0;
		while ( i<args.length && args[i].startsWith("-") ) {
			switch ( args[i] ) {
				case "-g":
					i++;
					grammarName = args[i++];
					break;
				case "-rule" :
					i++;
					startRule = args[i++];
					break;
				case "-corpus" :
					i++;
					corpusDir = args[i++];
					break;
				case "-files" :
					i++;
					fileExtension = args[i++];
					break;
				case "-indent" :
					i++;
					indentS = args[i++];
					break;
				case "-comment" :
					i++;
					commentS = args[i++];
					break;
				case "-o" :
					i++;
					outputFileName = args[i++];
					break;
			}
		}
		testFileName = args[i]; // must be last

		System.out.println("gramm: "+grammarName);
		String parserClassName = grammarName+"Parser";
		String lexerClassName = grammarName+"Lexer";
		Class<? extends Parser> parserClass = null;
		Class<? extends Lexer> lexerClass = null;
		Lexer lexer = null;
		try {
			parserClass = (Class<? extends Parser>)Class.forName(parserClassName);
			lexerClass = (Class<? extends Lexer>)Class.forName(lexerClassName);
		}
		catch (Exception e) {
			System.err.println("Can't load "+parserClassName+" or maybe "+lexerClassName);
			System.err.println("Make sure they are generated by ANTLR, compiled, and in CLASSPATH");
			e.printStackTrace(System.err);
		}
		if ( parserClass==null | lexerClass==null ) {
			return; // don't return from catch!
		}
		int indentSize = Integer.parseInt(indentS);
		int singleLineCommentType = -1;
		if ( commentS!=null ) {
			try {
				lexer = Dbg.getLexer(lexerClass, null);
			}
			catch (Exception e) {
				System.err.println("Can't instantiate lexer "+lexerClassName);
				e.printStackTrace(System.err);
			}
			if ( lexer==null ) return;
			Map<String, Integer> tokenTypeMap = lexer.getTokenTypeMap();
			if ( tokenTypeMap.containsKey(commentS) ) {
				singleLineCommentType = tokenTypeMap.get(commentS);
			}
		}
		String fileRegex = null;
		if ( fileExtension!=null ) {
			fileRegex = ".*\\."+fileExtension;
		}
		LangDescriptor language = new LangDescriptor(grammarName, corpusDir, fileRegex,
		                                             lexerClass, parserClass, startRule,
		                                             indentSize, singleLineCommentType);
		format(language, testFileName, outputFileName);
	}

	public static void format(LangDescriptor language,
	                          String testFileName,
	                          String outputFileName)
		throws Exception
	{
		// load all files up front
		List<String> allFiles = getFilenames(new File(language.corpusDir), language.fileRegex);
		List<InputDocument> documents = Dbg.load(allFiles, language);
		// if in corpus, don't include in corpus
		final String path = new File(testFileName).getAbsolutePath();
		List<InputDocument> others = filter(documents, d -> !d.fileName.equals(path));
		InputDocument testDoc = Dbg.parse(testFileName, language);
		Corpus corpus = new Corpus(others, language);
		corpus.train();

		Formatter formatter = new Formatter(corpus, language.indentSize, Formatter.DEFAULT_K,
		                                    FEATURES_INJECT_WS, FEATURES_HPOS);
		String output = formatter.format(testDoc, false);

		if ( outputFileName!=null ) {
			Utils.writeFile(outputFileName, output);
		}
		else {
			System.out.print(output);
		}
	}
}
